lux/macro/ast338449639lux/data/error402214209lux/data/product531407645lux/data/struct/list2115900016lux/data/ident-1179509153lux/data/text-253194704lux/data/number925374690lux/data/char-2083036283lux/data/bool-1039481255lux/control/eq-755356234lux/control/monad1682583984lux/control/applicative-263308519lux/control/functor1614333716lux/compiler-1050918746lux1077778958@lux;importsLLTluxTluxLTlux/compilerTcompilerLTlux/control/functorTLTlux/control/applicativeTLTlux/control/monadTLTlux/control/eqTLTlux/data/boolTboolLTlux/data/charTcharLTlux/data/numberTnumberLTlux/data/textTtextLTlux/data/identTidentLTlux/data/struct/listTlistLTlux/data/productTproductLTlux/data/errorTerrorLTlux/macro/astTastBoollux;BoolNatlux;NatIntlux;IntReallux;RealFraclux;FracCharlux;CharTextlux;TextVoidlux;VoidUnitlux;UnitIdentlux;IdentListlux;ListMaybelux;MaybeTypelux;TypeToplux;TopBottomlux;BottomAnn-Valuelux;Ann-ValueAnnslux;AnnsDeflux;DefBindingslux;BindingsCursorlux;CursorMetalux;MetaAnalysislux;AnalysisScopelux;ScopeAST'lux;AST'ASTlux;ASTEitherlux;EitherSourcelux;SourceModulelux;ModuleCompiler-Modelux;Compiler-ModeCompiler-Infolux;Compiler-InfoCompilerlux;CompilerLuxlux;LuxMacrolux;Macrocommentlux;commentAlllux;AllExlux;Ex->lux;->listlux;listlist&lux;list&&lux;&|lux;|_$lux;_$$_lux;$_iflux;ifhostlux;host`lux;``'lux;`''lux;'|>lux;|><|lux;<|.lux;.do-templatelux;do-templaten.=lux;n.=n.<lux;n.<n.<=lux;n.<=n.>lux;n.>n.>=lux;n.>=i.=lux;i.=i.<lux;i.<i.<=lux;i.<=i.>lux;i.>i.>=lux;i.>=f.=lux;f.=f.<lux;f.<f.<=lux;f.<=f.>lux;f.>f.>=lux;f.>=r.=lux;r.=r.<lux;r.<r.<=lux;r.<=r.>lux;r.>r.>=lux;r.>=n.+lux;n.+n.-lux;n.-n.*lux;n.*n./lux;n./n.%lux;n.%i.+lux;i.+i.-lux;i.-i.*lux;i.*i./lux;i./i.%lux;i.%f.+lux;f.+f.-lux;f.-f.*lux;f.*f./lux;f./f.%lux;f.%r.+lux;r.+r.-lux;r.-r.*lux;r.*r./lux;r./r.%lux;r.%n.minlux;n.minn.maxlux;n.maxi.minlux;i.mini.maxlux;i.maxf.minlux;f.minf.maxlux;f.maxr.minlux;r.minr.maxlux;r.maxtypelux;type:lux;::!lux;:!Reclux;Recexeclux;execcaselux;case^lux;^^orlux;^orletlux;letlambdalux;lambdalog!lux;log!def:lux;def:macro:lux;macro:sig:lux;sig:structlux;structstruct:lux;struct:idlux;idandlux;andorlux;ortype:lux;type:^openlux;^opencondlux;condget@lux;get@openlux;open|>.lux;|>.module:lux;module:::lux;::set@lux;set@update@lux;update@^templatelux;^templatereal-to-intlux;real-to-intint-to-reallux;int-to-reali.inclux;i.inci.declux;i.decn.inclux;n.incn.declux;n.decdoclux;doclooplux;loop^slotslux;^slotslet%lux;let%^~lux;^~^=>lux;^=>ident-forlux;ident-forn.even?lux;n.even?n.odd?lux;n.odd?i.even?lux;i.even?i.odd?lux;i.odd?$lux;$islux;is^@lux;^@^|>lux;^|>:!!lux;:!!error!lux;error!with-cursorlux;with-cursorundefinedlux;undefined@prelux;@pre@postlux;@postint-to-natlux;int-to-natnat-to-intlux;nat-to-intreal-to-fraclux;real-to-fracfrac-to-reallux;frac-to-realtype-oflux;type-oftemplate:lux;template:Monad<Lux>lux/compiler;Monad<Lux>with-gensymslux/compiler;with-gensymsFunctorlux/control/functor;FunctorcompFlux/control/functor;compFApplicativelux/control/applicative;ApplicativecompAlux/control/applicative;compAMonadlux/control/monad;Monaddolux/control/monad;doseqMlux/control/monad;seqMmapMlux/control/monad;mapMfoldMlux/control/monad;foldMliftMlux/control/monad;liftMEqlux/control/eq;Eqconjlux/control/eq;conjdisjlux/control/eq;disjText/unit@lux;Text^java.lang.StringText/append>@lux;Text^java.lang.String>@lux;Text^java.lang.String@lux;Text^java.lang.StringFold<List>lux/data/struct/list;Fold<List>reverselux/data/struct/list;reversefilterlux/data/struct/list;filterpartitionlux/data/struct/list;partitionas-pairslux/data/struct/list;as-pairstakelux/data/struct/list;takedroplux/data/struct/list;droptake-whilelux/data/struct/list;take-whiledrop-whilelux/data/struct/list;drop-whilesplitlux/data/struct/list;splitsplit-withlux/data/struct/list;split-withsplit-alllux/data/struct/list;split-allrepeatlux/data/struct/list;repeatiteratelux/data/struct/list;iteratefindlux/data/struct/list;findinterposelux/data/struct/list;interposesizelux/data/struct/list;sizeevery?lux/data/struct/list;every?any?lux/data/struct/list;any?atlux/data/struct/list;atEq<List>lux/data/struct/list;Eq<List>Monoid<List>lux/data/struct/list;Monoid<List>Functor<List>lux/data/struct/list;Functor<List>Applicative<List>lux/data/struct/list;Applicative<List>Monad<List>lux/data/struct/list;Monad<List>sortlux/data/struct/list;sorti.rangelux/data/struct/list;i.rangen.rangelux/data/struct/list;n.rangeempty?lux/data/struct/list;empty?member?lux/data/struct/list;member?headlux/data/struct/list;headtaillux/data/struct/list;tailziplux/data/struct/list;zipzip2lux/data/struct/list;zip2zip3lux/data/struct/list;zip3zip-withlux/data/struct/list;zip-withzip2-withlux/data/struct/list;zip2-withzip3-withlux/data/struct/list;zip3-withlastlux/data/struct/list;lastinitslux/data/struct/list;initsconcatlux/data/struct/list;concatListTlux/data/struct/list;ListTlift-listlux/data/struct/list;lift-listenumeratelux/data/struct/list;enumerateindiceslux/data/struct/list;indicesmap%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1@lux;ListU+1*$1%$0$1fold%@lux/control/fold;FoldUUU>>$1>$3$3>$3>%$5$1$3@lux;ListU+1*$1%$0$1List/unitU%@lux;ListU+1*$1%$0$1$1List/appendU>%@lux;ListU+1*$1%$0$1$1>%@lux;ListU+1*$1%$0$1$1%@lux;ListU+1*$1%$0$1$1Errorlux/data/error;ErrorFunctor<Error>lux/data/error;Functor<Error>Applicative<Error>lux/data/error;Applicative<Error>Monad<Error>lux/data/error;Monad<Error>ErrorTlux/data/error;ErrorTlift-errorlux/data/error;lift-errorjoin-pairsU>%@lux;ListU+1*$1%$0$1*$1$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTpairsSyntax@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;export?Btrue@lux;type-argsLTa@lux;type?Btrue@lux;docTA Lux AST syntax parser.Functor<Syntax>%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;export?Btrue@lux;struct?BtrueApplicative<Syntax>%@lux/control/applicative;ApplicativeU*%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1$1*U>$1%$3$1UU>%$5>$3$1>%$5$3%$5$1@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;export?Btrue@lux;struct?BtrueMonad<Syntax>%@lux/control/monad;MonadU*%@lux/control/applicative;ApplicativeU*%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1$1*U>$1%$3$1UU>%$5>$3$1>%$5$3%$5$1$1U>%$3%$3$1%$3$1@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;export?Btrue@lux;struct?Btrueremaining-inputs>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String@lux;func-argsLTastsany%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;export?Btrue@lux;docTJust returns the next input without applying any logic.bool%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;export?Btrue@lux;docTParses the next bool input AST.bool?>@lux;Bool^java.lang.Boolean%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given bool is the next input AST.bool!>@lux;Bool^java.lang.Boolean%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given bool is the next input AST.nat%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Nat^#Nat@lux;export?Btrue@lux;docTParses the next nat input AST.nat?>@lux;Nat^#Nat%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given nat is the next input AST.nat!>@lux;Nat^#Nat%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given nat is the next input AST.int%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Int^java.lang.Long@lux;export?Btrue@lux;docTParses the next int input AST.int?>@lux;Int^java.lang.Long%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given int is the next input AST.int!>@lux;Int^java.lang.Long%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given int is the next input AST.frac%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Frac^#Frac@lux;export?Btrue@lux;docTParses the next frac input AST.frac?>@lux;Frac^#Frac%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given frac is the next input AST.frac!>@lux;Frac^#Frac%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given frac is the next input AST.real%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Real^java.lang.Double@lux;export?Btrue@lux;docTParses the next real input AST.real?>@lux;Real^java.lang.Double%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given real is the next input AST.real!>@lux;Real^java.lang.Double%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given real is the next input AST.char%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Char^java.lang.Character@lux;export?Btrue@lux;docTParses the next char input AST.char?>@lux;Char^java.lang.Character%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given char is the next input AST.char!>@lux;Char^java.lang.Character%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given char is the next input AST.text%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Text^java.lang.String@lux;export?Btrue@lux;docTParses the next text input AST.text?>@lux;Text^java.lang.String%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given text is the next input AST.text!>@lux;Text^java.lang.String%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given text is the next input AST.symbol%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;export?Btrue@lux;docTParses the next symbol input AST.symbol?>@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given symbol is the next input AST.symbol!>@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given symbol is the next input AST.tag%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;export?Btrue@lux;docTParses the next tag input AST.tag?>@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;func-argsLTv@lux;export?Btrue@lux;docTAsks if the given tag is the next input AST.tag!>@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTv@lux;export?Btrue@lux;docTEnsures the given tag is the next input AST.assert>@lux;Text^java.lang.String>@lux;Bool^java.lang.Boolean%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTmessageTtest@lux;export?Btrue@lux;docTFails with the given message if the test is false.pos-int%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Int^java.lang.Long@lux;export?Btrueneg-int%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Int^java.lang.Long@lux;export?Btruelocal-symbol%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Text^java.lang.String@lux;export?Btrue@lux;docTParse a local symbol (a symbol that has no module prefix).local-tag%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Text^java.lang.String@lux;export?Btrue@lux;docTParse a local tag (a tag that has no module prefix).formU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTp@lux;export?Btrue@lux;docTParse inside the contents of a form as if they were the input ASTs.tupleU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTp@lux;export?Btrue@lux;docTParse inside the contents of a tuple as if they were the input ASTs.recordU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTp@lux;export?Btrue@lux;docTParse inside the contents of a record as if they were the input ASTs.optU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;MaybeU+1$1$1@lux;func-argsLTp@lux;export?Btrue@lux;docTOptionality combinator.runU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;func-argsLTtokensTp@lux;export?BtruesomeU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTp@lux;export?Btrue@lux;docT0-or-more combinator.manyU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTp@lux;export?Btrue@lux;docT1-or-more combinator.seqUU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$3>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1*$3$1@lux;func-argsLTp1Tp2@lux;export?Btrue@lux;docTSequencing combinator.altUU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$3>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1+$3$1@lux;func-argsLTp1Tp2@lux;export?Btrue@lux;docTHeterogeneous alternative combinator.eitherU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTplTpr@lux;export?Btrue@lux;docTHomogeneous alternative combinator.end%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;export?Btrue@lux;docTEnsures there are no more inputs.end?%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Bool^java.lang.Boolean@lux;export?Btrue@lux;docTChecks whether there are no more inputs.exactlyU>@lux;Nat^#Nat>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTnTp@lux;export?Btrue@lux;docTParse exactly N times.at-leastU>@lux;Nat^#Nat>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTnTp@lux;export?Btrue@lux;docTParse at least N times.at-mostU>@lux;Nat^#Nat>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTnTp@lux;export?Btrue@lux;docTParse at most N times.betweenU>@lux;Nat^#Nat>@lux;Nat^#Nat>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTfromTtoTp@lux;export?Btrue@lux;docTParse between N and M times.sep-byUU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$3%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1%@lux;ListU+1*$1%$0$1$3@lux;func-argsLTsepTp@lux;export?Btrue@lux;docTParsers instances of 'p' that are separated by instances of 'sep'.notU>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1@lux;Unit1@lux;func-argsLTp@lux;export?BtruefailU>@lux;Text^java.lang.String%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTmessage@lux;export?BtruedefaultU>$1>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTvalueTparser@lux;export?Btrue@lux;docTIf the given parser fails, returns the default value.onU>@lux;Compiler*@lux;Compiler-Info*@lux;Text^java.lang.String*@lux;Text^java.lang.String@lux;Compiler-Mode+1+1+11*@lux;Source%@lux;ListU+1*$1%$0$1%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String*@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Module*@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Def*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Scope*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*@lux;Int^java.lang.Long*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Nat^#Nat%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Nat^#Nat@lux;Void0>%@lux;LuxU>@lux;Compiler*@lux;Compiler-Info*@lux;Text^java.lang.String*@lux;Text^java.lang.String@lux;Compiler-Mode+1+1+11*@lux;Source%@lux;ListU+1*$1%$0$1%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String*@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Module*@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Def*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Scope*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*@lux;Int^java.lang.Long*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Nat^#Nat%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Nat^#Nat@lux;Void0%%@lux;EitherUU+$3$1@lux;Text^java.lang.String*@lux;Compiler*@lux;Compiler-Info*@lux;Text^java.lang.String*@lux;Text^java.lang.String@lux;Compiler-Mode+1+1+11*@lux;Source%@lux;ListU+1*$1%$0$1%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String*@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Module*@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Def*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Scope*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*@lux;Int^java.lang.Long*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Nat^#Nat%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Nat^#Nat@lux;Void0$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTcompilerTaction@lux;export?Btrue@lux;docTRun a Lux operation as if it was a Syntax parser.localU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long>%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1%@lux/macro/syntax;SyntaxU>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux/data/error;ErrorU+@lux;Text^java.lang.String$1*%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long$1$1@lux;func-argsLTlocal-inputsTsyntax@lux;export?Btrue@lux;docTRun a syntax parser with the given list of inputs, instead of the real ones.text.join-with>@lux;Text^java.lang.String>%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;hidden?Btrue@lux;export?Btruesyntax:@lux;Macro>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;LuxU>@lux;Compiler*@lux;Compiler-Info*@lux;Text^java.lang.String*@lux;Text^java.lang.String@lux;Compiler-Mode+1+1+11*@lux;Source%@lux;ListU+1*$1%$0$1%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String*@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Module*@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Def*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Scope*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*@lux;Int^java.lang.Long*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Nat^#Nat%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Nat^#Nat@lux;Void0%%@lux;EitherUU+$3$1@lux;Text^java.lang.String*@lux;Compiler*@lux;Compiler-Info*@lux;Text^java.lang.String*@lux;Text^java.lang.String@lux;Compiler-Mode+1+1+11*@lux;Source%@lux;ListU+1*$1%$0$1%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String*@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Module*@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Def*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Scope*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*@lux;Int^java.lang.Long*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Nat^#Nat%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Nat^#Nat@lux;Void0$1%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;func-argsLTtokens@lux;export?Btrue@lux;macro?Btrue@lux;docT## A more advanced way to define macros than macro:.
## The inputs to the macro can be parsed in complex ways through the use of syntax parsers.
## The macro body is also (implicitly) run in the Monad<Lux>, to save some typing.
## Also, the compiler state can be accessed through the *compiler* binding.
(syntax: #export (object [#let [imports (class-imports *compiler*)]]
                   [#let [class-vars (list)]]
                   [super (opt (super-class-decl^ imports class-vars))]
                   [interfaces (tuple (some (super-class-decl^ imports class-vars)))]
                   [constructor-args (constructor-args^ imports class-vars)]
                   [methods (some (overriden-method-def^ imports))])
  (let [def-code ($_ Text/append "anon-class:"
                     (spaced (list (super-class-decl$ (lux;defaultobject-super-class super))
                                   (with-brackets (spaced (map super-class-decl$ interfaces)))
                                   (with-brackets (spaced (map constructor-arg$ constructor-args)))
                                   (with-brackets (spaced (map (method-def$ id) methods))))))]
    (wrap (list (` (lux;_lux_proc["jvm" (~ (lux/macro/ast;textdef-code))] []))))))