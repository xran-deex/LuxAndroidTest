lux/concurrency/frp1759656994lux/concurrency/promise-127347524lux/concurrency/atom1421347710lux/macro/syntax-1591565866lux/macro/ast338449639lux/compiler-1050918746lux/host-2083025408lux/data/text/format-9817582lux/data/maybe1012391505lux/data/text-253194704lux/data/product531407645lux/data/struct/queue-1727293660lux/data/struct/dict980715530lux/data/struct/list2115900016lux/codata/io733469181lux/control/monad1682583984lux/control/applicative-263308519lux/control/functor1614333716lux1077778958Var-StatevalueobserversTx-Framevaroriginalcurrent@lux;importsLLTluxTLTlux/control/functorTLTlux/control/applicativeTLTlux/control/monadTLTlux/codata/ioTioLTlux/data/struct/listTlistLTlux/data/struct/dictTdictLTlux/data/struct/queueTQLTlux/data/productTproductLTlux/data/textTtextLTlux/data/maybeTLTlux/data/text/formatTLTlux/hostTLTlux/compilerTcompilerLTlux/macro/astTastLTlux/macro/syntaxTsLTlux/concurrency/atomTatomLTlux/concurrency/promiseTPLTlux/concurrency/frpTfrpBoollux;BoolNatlux;NatIntlux;IntReallux;RealFraclux;FracCharlux;CharTextlux;TextVoidlux;VoidUnitlux;UnitIdentlux;IdentListlux;ListMaybelux;MaybeTypelux;TypeToplux;TopBottomlux;BottomAnn-Valuelux;Ann-ValueAnnslux;AnnsDeflux;DefBindingslux;BindingsCursorlux;CursorMetalux;MetaAnalysislux;AnalysisScopelux;ScopeAST'lux;AST'ASTlux;ASTEitherlux;EitherSourcelux;SourceModulelux;ModuleCompiler-Modelux;Compiler-ModeCompiler-Infolux;Compiler-InfoCompilerlux;CompilerLuxlux;LuxMacrolux;Macrocommentlux;commentAlllux;AllExlux;Ex->lux;->listlux;listlist&lux;list&&lux;&|lux;|_$lux;_$$_lux;$_iflux;ifhostlux;host`lux;``'lux;`''lux;'|>lux;|><|lux;<|.lux;.do-templatelux;do-templaten.=lux;n.=n.<lux;n.<n.<=lux;n.<=n.>lux;n.>n.>=lux;n.>=i.=lux;i.=i.<lux;i.<i.<=lux;i.<=i.>lux;i.>i.>=lux;i.>=f.=lux;f.=f.<lux;f.<f.<=lux;f.<=f.>lux;f.>f.>=lux;f.>=r.=lux;r.=r.<lux;r.<r.<=lux;r.<=r.>lux;r.>r.>=lux;r.>=n.+lux;n.+n.-lux;n.-n.*lux;n.*n./lux;n./n.%lux;n.%i.+lux;i.+i.-lux;i.-i.*lux;i.*i./lux;i./i.%lux;i.%f.+lux;f.+f.-lux;f.-f.*lux;f.*f./lux;f./f.%lux;f.%r.+lux;r.+r.-lux;r.-r.*lux;r.*r./lux;r./r.%lux;r.%n.minlux;n.minn.maxlux;n.maxi.minlux;i.mini.maxlux;i.maxf.minlux;f.minf.maxlux;f.maxr.minlux;r.minr.maxlux;r.maxnotlux;nottypelux;type:lux;::!lux;:!Reclux;Recexeclux;execcaselux;case^lux;^^orlux;^orletlux;letlambdalux;lambdalog!lux;log!def:lux;def:macro:lux;macro:sig:lux;sig:structlux;structstruct:lux;struct:idlux;idandlux;andorlux;ortype:lux;type:^openlux;^opencondlux;condget@lux;get@openlux;open|>.lux;|>.defaultlux;defaultmodule:lux;module:::lux;::set@lux;set@update@lux;update@^templatelux;^templatereal-to-intlux;real-to-intint-to-reallux;int-to-reali.inclux;i.inci.declux;i.decn.inclux;n.incn.declux;n.decdoclux;doclooplux;loop^slotslux;^slotslet%lux;let%^~lux;^~^=>lux;^=>ident-forlux;ident-forn.even?lux;n.even?n.odd?lux;n.odd?i.even?lux;i.even?i.odd?lux;i.odd?$lux;$islux;is^@lux;^@^|>lux;^|>:!!lux;:!!error!lux;error!with-cursorlux;with-cursorundefinedlux;undefined@prelux;@pre@postlux;@postint-to-natlux;int-to-natnat-to-intlux;nat-to-intreal-to-fraclux;real-to-fracfrac-to-reallux;frac-to-realtype-oflux;type-oftemplate:lux;template:Functorlux/control/functor;FunctorcompFlux/control/functor;compFApplicativelux/control/applicative;ApplicativecompAlux/control/applicative;compAMonadlux/control/monad;Monaddolux/control/monad;doseqMlux/control/monad;seqMmapMlux/control/monad;mapMfoldMlux/control/monad;foldMliftMlux/control/monad;liftMIOlux/codata/io;IOiolux/codata/io;ioFunctor<IO>lux/codata/io;Functor<IO>Applicative<IO>lux/codata/io;Applicative<IO>Monad<IO>lux/codata/io;Monad<IO>Fold<List>lux/data/struct/list;Fold<List>reverselux/data/struct/list;reversefilterlux/data/struct/list;filterpartitionlux/data/struct/list;partitionas-pairslux/data/struct/list;as-pairstakelux/data/struct/list;takedroplux/data/struct/list;droptake-whilelux/data/struct/list;take-whiledrop-whilelux/data/struct/list;drop-whilesplitlux/data/struct/list;splitsplit-withlux/data/struct/list;split-withsplit-alllux/data/struct/list;split-allrepeatlux/data/struct/list;repeatiteratelux/data/struct/list;iteratefindlux/data/struct/list;findinterposelux/data/struct/list;interposesizelux/data/struct/list;sizeevery?lux/data/struct/list;every?any?lux/data/struct/list;any?atlux/data/struct/list;atEq<List>lux/data/struct/list;Eq<List>Monoid<List>lux/data/struct/list;Monoid<List>Functor<List>lux/data/struct/list;Functor<List>Applicative<List>lux/data/struct/list;Applicative<List>Monad<List>lux/data/struct/list;Monad<List>sortlux/data/struct/list;sorti.rangelux/data/struct/list;i.rangen.rangelux/data/struct/list;n.rangeempty?lux/data/struct/list;empty?member?lux/data/struct/list;member?headlux/data/struct/list;headtaillux/data/struct/list;tailziplux/data/struct/list;zipzip2lux/data/struct/list;zip2zip3lux/data/struct/list;zip3zip-withlux/data/struct/list;zip-withzip2-withlux/data/struct/list;zip2-withzip3-withlux/data/struct/list;zip3-withlastlux/data/struct/list;lastinitslux/data/struct/list;initsconcatlux/data/struct/list;concatListTlux/data/struct/list;ListTlift-listlux/data/struct/list;lift-listenumeratelux/data/struct/list;enumerateindiceslux/data/struct/list;indicesList/map%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1@lux;ListU+1*$1%$0$1Dictlux/data/struct/dict;DictMonoid<Maybe>lux/data/maybe;Monoid<Maybe>Functor<Maybe>lux/data/maybe;Functor<Maybe>Applicative<Maybe>lux/data/maybe;Applicative<Maybe>Monad<Maybe>lux/data/maybe;Monad<Maybe>Eq<Maybe>lux/data/maybe;Eq<Maybe>MaybeTlux/data/maybe;MaybeTlift-maybelux/data/maybe;lift-maybeformatlux/data/text/format;formatFormatterlux/data/text/format;Formatter%blux/data/text/format;%b%nlux/data/text/format;%n%ilux/data/text/format;%i%flux/data/text/format;%f%rlux/data/text/format;%r%clux/data/text/format;%c%tlux/data/text/format;%t%identlux/data/text/format;%ident%astlux/data/text/format;%ast%typelux/data/text/format;%type%binlux/data/text/format;%bin%octlux/data/text/format;%oct%hexlux/data/text/format;%hex%listlux/data/text/format;%listb2llux/host;b2ls2llux/host;s2ld2ilux/host;d2id2llux/host;d2ld2flux/host;d2ff2ilux/host;f2if2llux/host;f2lf2dlux/host;f2di2blux/host;i2bi2slux/host;i2si2llux/host;i2li2flux/host;i2fi2dlux/host;i2di2clux/host;i2cl2blux/host;l2bl2slux/host;l2sl2ilux/host;l2il2flux/host;l2fl2dlux/host;l2dc2blux/host;c2bc2slux/host;c2sc2ilux/host;c2ic2llux/host;c2lBoolean-Arraylux/host;Boolean-ArrayByte-Arraylux/host;Byte-ArrayShort-Arraylux/host;Short-ArrayInt-Arraylux/host;Int-ArrayLong-Arraylux/host;Long-ArrayFloat-Arraylux/host;Float-ArrayDouble-Arraylux/host;Double-ArrayChar-Arraylux/host;Char-Arrayclass:lux/host;class:interface:lux/host;interface:objectlux/host;objectnulllux/host;nullnull?lux/host;null????lux/host;???!!!lux/host;!!!trylux/host;tryinstance?lux/host;instance?synchronizedlux/host;synchronizeddo-tolux/host;do-tojvm-importlux/host;jvm-importarraylux/host;arrayarray-lengthlux/host;array-lengtharray-loadlux/host;array-loadarray-storelux/host;array-storewith-openlux/host;with-openclass-forlux/host;class-forresolve-classlux/host;resolve-classsyntax:lux/macro/syntax;syntax:Syntaxlux/macro/syntax;SyntaxAtomlux/concurrency/atom;Atomatomlux/concurrency/atom;atomPromiselux/concurrency/promise;PromisePromise/map%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1Promise/wrapU>$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1Promise/applyUU>%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1>$3$1>%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$3%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1Promise/joinU>%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1Var-State@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;type-argsLTa@lux;type?Btrue@lux;tagsLTvalueTobserversVar@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;export?Btrue@lux;type-argsLTa@lux;type?Btrue@lux;docTA mutable cell containing a value, and observers that will be alerted of any change to it.Tx-Frame@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;type-argsLTa@lux;type?Btrue@lux;tagsLTvarToriginalTcurrentTx@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;type-argsL@lux;type?BtrueSTM@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;export?Btrue@lux;type-argsLTa@lux;type?Btrue@lux;docTA computation which updates a transaction and produces a value.varU>$1%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1@lux;func-argsLTvalue@lux;export?Btrue@lux;docTCreates a new STM var, with a default value.raw-readU>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1$1find-var-valueU>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1%@lux;MaybeU+1$1$1@lux;func-argsLTvarTtxreadU>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1$1@lux;func-argsLTvar@lux;export?Btrueread!U>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/codata/io;IOU>@lux;Void0$1$1@lux;func-argsLTvar@lux;export?Btrue@lux;docTReads var immediately, without going through a transaction.update-tx-valueU>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1>$1>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1@lux;func-argsLTvarTvalueTtxwriteU>$1>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1@lux;Unit1@lux;func-argsLTvalueTvar@lux;export?Btruewrite!U>$1>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1@lux;func-argsLTnew-valueTvar@lux;export?Btrue@lux;docTWrites value to var immediately, without going through a transaction.unfollowU>@lux;Text^java.lang.String>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1@lux;func-argsLTlabelTtarget@lux;export?Btrue@lux;docTStop tracking the changes to a Var.

Caveat emptor: It won't close any Chan that used to track the changes.followU>@lux;Text^java.lang.String>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/codata/io;IOU>@lux;Void0$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1@lux;func-argsLTlabelTtarget@lux;export?Btrue@lux;docTCreates a channel (identified by a label) that will receive all changes to the value of the given var.Functor<STM>%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1@lux;export?Btrue@lux;struct?BtrueApplicative<STM>%@lux/control/applicative;ApplicativeU*%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1$1*U>$1%$3$1UU>%$5>$3$1>%$5$3%$5$1@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1@lux;export?Btrue@lux;struct?BtrueMonad<STM>%@lux/control/monad;MonadU*%@lux/control/applicative;ApplicativeU*%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1$1*U>$1%$3$1UU>%$5>$3$1>%$5$3%$5$1$1U>%$3%$3$1%$3$1@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1@lux;export?Btrue@lux;struct?Btrueupdate!U>>$1$1>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/codata/io;IOU>@lux;Void0$1*$1$1@lux;func-argsLTfTvar@lux;export?Btrue@lux;docTWill update a Var's value, and return a tuple with the old and the new values.updateU>>$1$1>%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1*$1$1@lux;func-argsLTfTvar@lux;export?Btrue@lux;docTWill update a Var's value, and return a tuple with the old and the new values.can-commit?>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1@lux;Bool^java.lang.Boolean@lux;func-argsLTtxcommit-var>E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1@lux;Unit1@lux;func-argsLT[_var _original _current]fresh-tx@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1pending-commits%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1E*%@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1commit-processor-flag%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1@lux;Bool^java.lang.Booleanprocess-commit>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1*%@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1@lux;Unit1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1@lux;Unit1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1@lux;Unit1@lux;func-argsLTcommitsinit-processor!%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1commitU>%@lux/concurrency/stm;STMU>@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1*@lux/concurrency/stm;Tx%@lux;ListU+1*$1%$0$1E%@lux/concurrency/stm;Tx-FrameU*%@lux/concurrency/stm;VarU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/stm;Var-StateU*$1%%@lux/data/struct/dict;DictUU*%@lux/control/hash;HashU*%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1@lux;Nat^#Nat$3%%@lux/data/struct/dict;NodeUU+*@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%$2$3$1+*@lux/data/struct/dict;BitMap@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1%%@lux;EitherUU+$3$1%%$2$3$1*$3$1*@lux/data/struct/dict;Hash-Code@lux;Nat^#Nat%@lux/data/struct/array;ArrayU^#Array$1*$3$1$3$1@lux;Text^java.lang.String>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1*$1$1$1$1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1@lux;func-argsLTstm-proc@lux;export?Btrue@lux;docTCommits a transaction and returns its result (asynchronously).

Note that a transaction may be re-run an indeterminate number of times if other transactions involving the same variables successfully commit first.

For this reason, it's important to note that transactions must be free from side-effects, such as I/O.