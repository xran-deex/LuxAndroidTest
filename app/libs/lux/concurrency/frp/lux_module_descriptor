lux/concurrency/promise-127347524lux/macro/syntax-1591565866lux/compiler-1050918746lux/data/text/format-9817582lux/data/struct/list2115900016lux/codata/function-982584506lux/codata/io733469181lux/control/eq-755356234lux/control/monad1682583984lux/control/applicative-263308519lux/control/functor1614333716lux1077778958@lux;importsLLTluxTLTlux/control/functorTLTlux/control/applicativeTLTlux/control/monadTLTlux/control/eqTLTlux/codata/ioTioLTlux/codata/functionTLTlux/data/struct/listTlistLTlux/data/text/formatTLTlux/compilerTcompilerLTlux/macro/syntaxTsLTlux/concurrency/promiseT&Boollux;BoolNatlux;NatIntlux;IntReallux;RealFraclux;FracCharlux;CharTextlux;TextVoidlux;VoidUnitlux;UnitIdentlux;IdentListlux;ListMaybelux;MaybeTypelux;TypeToplux;TopBottomlux;BottomAnn-Valuelux;Ann-ValueAnnslux;AnnsDeflux;DefBindingslux;BindingsCursorlux;CursorMetalux;MetaAnalysislux;AnalysisScopelux;ScopeAST'lux;AST'ASTlux;ASTEitherlux;EitherSourcelux;SourceModulelux;ModuleCompiler-Modelux;Compiler-ModeCompiler-Infolux;Compiler-InfoCompilerlux;CompilerLuxlux;LuxMacrolux;Macrocommentlux;commentAlllux;AllExlux;Ex->lux;->listlux;listlist&lux;list&&lux;&|lux;|_$lux;_$$_lux;$_iflux;ifhostlux;host`lux;``'lux;`''lux;'|>lux;|><|lux;<|.lux;.do-templatelux;do-templaten.=lux;n.=n.<lux;n.<n.<=lux;n.<=n.>lux;n.>n.>=lux;n.>=i.=lux;i.=i.<lux;i.<i.<=lux;i.<=i.>lux;i.>i.>=lux;i.>=f.=lux;f.=f.<lux;f.<f.<=lux;f.<=f.>lux;f.>f.>=lux;f.>=r.=lux;r.=r.<lux;r.<r.<=lux;r.<=r.>lux;r.>r.>=lux;r.>=n.+lux;n.+n.-lux;n.-n.*lux;n.*n./lux;n./n.%lux;n.%i.+lux;i.+i.-lux;i.-i.*lux;i.*i./lux;i./i.%lux;i.%f.+lux;f.+f.-lux;f.-f.*lux;f.*f./lux;f./f.%lux;f.%r.+lux;r.+r.-lux;r.-r.*lux;r.*r./lux;r./r.%lux;r.%n.minlux;n.minn.maxlux;n.maxi.minlux;i.mini.maxlux;i.maxf.minlux;f.minf.maxlux;f.maxr.minlux;r.minr.maxlux;r.maxnotlux;nottypelux;type:lux;::!lux;:!Reclux;Recexeclux;execcaselux;case^lux;^^orlux;^orletlux;letlambdalux;lambdalog!lux;log!def:lux;def:macro:lux;macro:sig:lux;sig:structlux;structstruct:lux;struct:idlux;idandlux;andorlux;ortype:lux;type:^openlux;^opencondlux;condget@lux;get@openlux;open|>.lux;|>.defaultlux;defaultmodule:lux;module:::lux;::set@lux;set@update@lux;update@^templatelux;^templatereal-to-intlux;real-to-intint-to-reallux;int-to-reali.inclux;i.inci.declux;i.decn.inclux;n.incn.declux;n.decdoclux;doclooplux;loop^slotslux;^slotslet%lux;let%^~lux;^~^=>lux;^=>ident-forlux;ident-forn.even?lux;n.even?n.odd?lux;n.odd?i.even?lux;i.even?i.odd?lux;i.odd?$lux;$islux;is^@lux;^@^|>lux;^|>:!!lux;:!!error!lux;error!with-cursorlux;with-cursorundefinedlux;undefined@prelux;@pre@postlux;@postint-to-natlux;int-to-natnat-to-intlux;nat-to-intreal-to-fraclux;real-to-fracfrac-to-reallux;frac-to-realtype-oflux;type-oftemplate:lux;template:Functorlux/control/functor;FunctorcompFlux/control/functor;compFApplicativelux/control/applicative;ApplicativecompAlux/control/applicative;compAMonadlux/control/monad;Monaddolux/control/monad;doseqMlux/control/monad;seqMmapMlux/control/monad;mapMfoldMlux/control/monad;foldMliftMlux/control/monad;liftMEqlux/control/eq;Eqconjlux/control/eq;conjdisjlux/control/eq;disjIOlux/codata/io;IOiolux/codata/io;ioFunctor<IO>lux/codata/io;Functor<IO>Applicative<IO>lux/codata/io;Applicative<IO>Monad<IO>lux/codata/io;Monad<IO>constlux/codata/function;constfliplux/codata/function;flipMonoid<Function>lux/codata/function;Monoid<Function>formatlux/data/text/format;formatFormatterlux/data/text/format;Formatter%blux/data/text/format;%b%nlux/data/text/format;%n%ilux/data/text/format;%i%flux/data/text/format;%f%rlux/data/text/format;%r%clux/data/text/format;%c%tlux/data/text/format;%t%identlux/data/text/format;%ident%astlux/data/text/format;%ast%typelux/data/text/format;%type%binlux/data/text/format;%bin%octlux/data/text/format;%oct%hexlux/data/text/format;%hex%listlux/data/text/format;%listsyntax:lux/macro/syntax;syntax:Syntaxlux/macro/syntax;SyntaxChan@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;export?Btrue@lux;type-argsLTa@lux;type?Btrue@lux;docTAn asynchronous channel of values which may be closed.

Reading from a channel does not remove the read piece of data, as it can still be accessed if you have an earlier node of the channel.chan@lux;Macro>%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;LuxU>@lux;Compiler*@lux;Compiler-Info*@lux;Text^java.lang.String*@lux;Text^java.lang.String@lux;Compiler-Mode+1+1+11*@lux;Source%@lux;ListU+1*$1%$0$1%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String*@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Module*@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Def*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Scope*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*@lux;Int^java.lang.Long*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Nat^#Nat%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Nat^#Nat@lux;Void0%%@lux;EitherUU+$3$1@lux;Text^java.lang.String*@lux;Compiler*@lux;Compiler-Info*@lux;Text^java.lang.String*@lux;Text^java.lang.String@lux;Compiler-Mode+1+1+11*@lux;Source%@lux;ListU+1*$1%$0$1%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Text^java.lang.String*@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Module*@lux;Int^java.lang.Long*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String@lux;Def*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String*%@lux;ListU+1*$1%$0$1@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String*@lux;Bool^java.lang.Boolean@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Anns%@lux;ListU+1*$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String@lux;Ann-Value%U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$0$1%@lux;ListU+1*$1%$0$1*@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;ListU+1*$1%$0$1@lux;Scope*%@lux;ListU+1*$1%$0$1@lux;Text^java.lang.String*@lux;Int^java.lang.Long*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Text^java.lang.String@lux;Analysis%%@lux;MetaUU*$3$1*@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;Void0*%%@lux;BindingsUU*@lux;Nat^#Nat%@lux;ListU+1*$1%$0$1*$3$1@lux;Nat^#Nat%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*%@lux;MaybeU+1$1@lux;Type%U+*@lux;Text^java.lang.String%@lux;ListU+1*$1%$0$1%$0$1+1+1+*%$0$1%$0$1+*%$0$1%$0$1+*%$0$1%$0$1+@lux;Nat^#Nat+@lux;Nat^#Nat+@lux;Nat^#Nat+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%@lux;ListU+1*$1%$0$1%$0$1%$0$1+*%$0$1%$0$1*@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String%$0$1@lux;Void0*@lux;Nat^#Nat*%@lux;ListU+1*$1%$0$1@lux;Nat^#Nat@lux;Void0$1%@lux;ListU+1*$1%$0$1@lux;AST%%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long%@lux;AST'U+@lux;Bool^java.lang.Boolean+@lux;Nat^#Nat+@lux;Int^java.lang.Long+@lux;Frac^#Frac+@lux;Real^java.lang.Double+@lux;Char^java.lang.Character+@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+@lux;Ident*@lux;Text^java.lang.String@lux;Text^java.lang.String+%@lux;ListU+1*$1%$0$1%$1%$0$1+%@lux;ListU+1*$1%$0$1%$1%$0$1%@lux;ListU+1*$1%$0$1*%$1%$0$1%$1%$0$1%@lux;MetaUU*$3$1@lux;Cursor*@lux;Text^java.lang.String*@lux;Int^java.lang.Long@lux;Int^java.lang.Long@lux;func-argsLT__gensym__g!tokens+7140@lux;export?Btrue@lux;macro?Btrue@lux;docT## Makes an uninitialized Chan (in this case, of Unit).
(chan Unit)

## The type is optional.
(chan)filterU>>$1@lux;Bool^java.lang.Boolean>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1@lux;func-argsLTpTxs@lux;export?BtruewriteU>$1>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/codata/io;IOU>@lux;Void0$1%@lux;MaybeU+1$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1@lux;func-argsLTvalueTchan@lux;export?Btrue@lux;docTWrite to a channel, so long as it's still open.closeU>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Bool^java.lang.Boolean@lux;func-argsLTchan@lux;export?Btruepipe'U>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1@lux;Unit1@lux;func-argsLTinputToutputpipeU>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1@lux;Unit1@lux;func-argsLTinputToutput@lux;export?Btrue@lux;docTCopy/pipe the contents of a channel on to another.mergeU>%@lux;ListU+1*$1%$0$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1@lux;func-argsLTxss@lux;export?Btrue@lux;docTFuse all the elements in a list of channels by piping them onto a new output channel.foldUU>>$1>$3%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$3>$3>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$3@lux;func-argsLTfTinitTxs@lux;export?Btrue@lux;docTAsynchronous fold over channels.no-dups'U>%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>$1>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1@lux;func-argsLTeqTlast-oneTxsno-dupsU>%@lux/control/eq;EqU>$1>$1@lux;Bool^java.lang.Boolean$1>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1@lux;func-argsLTeqTxs@lux;export?Btrue@lux;docTMultiple consecutive equal values in the input channel will just be single value in the output channel.consumeU>%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;ListU+1*$1%$0$1$1@lux;func-argsLTxs@lux;export?Btrue@lux;docTReads the entirety of a channel's contents and returns them as a list.as-chanU>%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1$1%@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1$1@lux;func-argsLTp@lux;export?BtrueFunctor<Chan>%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1@lux;export?Btrue@lux;struct?BtrueApplicative<Chan>%@lux/control/applicative;ApplicativeU*%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1$1*U>$1%$3$1UU>%$5>$3$1>%$5$3%$5$1@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1@lux;export?Btrue@lux;struct?BtrueMonad<Chan>%@lux/control/monad;MonadU*%@lux/control/applicative;ApplicativeU*%@lux/control/functor;FunctorUUU>>$3$1>%$5$3%$5$1$1*U>$1%$3$1UU>%$5>$3$1>%$5$3%$5$1$1U>%$3%$3$1%$3$1@lux/concurrency/frp;ChanU%@lux/concurrency/promise;PromiseU%@lux/concurrency/atom;AtomU%U^java.util.concurrent.atomic.AtomicReference$1$1%@lux/concurrency/promise;Promise-StateU*%@lux;MaybeU+1$1$1%@lux;ListU+1*$1%$0$1>$1%@lux/codata/io;IOU>@lux;Void0$1@lux;Unit1$1%@lux;MaybeU+1$1*$1%$0$1@lux;export?Btrue@lux;struct?Btrue